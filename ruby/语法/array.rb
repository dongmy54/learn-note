# clear 清空数组
a = [1,5,6]
a.clear
# => []


#===================================================================================#
# unshift 向数组前插值
[2,3,5].unshift(6)
# => [
#        [0] 6,
#        [1] 2,
#        [2] 3,
#        [3] 5
#    ]


#===================================================================================#
# 产生数组
# 1、（）中个数
# 2、 块中每个元素
Array.new(5){ rand(100) }
# => [
#        [0] 54,
#        [1] 55,
#        [2] 48,
#        [3] 71,
#        [4] 67
#    ]


#===================================================================================#
# 数组转字符串
# 等价于 .join(",")
a = [5,7,9] * ','
# => "5,7,9"


#===================================================================================#
# fetch 获取默认值
a = [5,8,9,2]
a.fetch(2,'no exist')
# => 9
a.fetch(100, 'no exist')
# => 'no exist'


#===================================================================================#
# 返回 去重后 数组
# uniq! 改变自身
a = [1,2,5,2,1,5]
a.uniq
# => [
# =>     [0] 1,
# =>     [1] 2,
# =>     [2] 5
# => ]


#===================================================================================#
# compact 去除数组中 nil 元素
a = [5,6,8,nil,10,nil,14]
a.compact
# => [
# =>     [0] 5,
# =>     [1] 6,
# =>     [2] 8,
# =>     [3] 10,
# =>     [4] 14
# => ]


#===================================================================================#
# << << 向数组中连续追加元素
arr = [3,5]
arr << 'd' << 'k'
# => [3,5,'d','k']


#===================================================================================#
# 数组快速求和
[2,5,6,8].reduce(:+)
# => 21


#===================================================================================#
# to_a 快速创建 区域数组
('a'..'z').to_a
# => ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]


#===================================================================================#
# include? 是否包含
%w(saf qw ewer dsd).include?('saf')
# => true


#===================================================================================#
# 判断 两个数组中 元素是否相同
a = [1,3,5,4]
b = [5,3,4,1]
a.sort == b.sort
# => true


#===================================================================================#
# 两数组 合并 成新组成
# 等价于 a.concat(b)
a = [1,3,4]
b = [1,3,8]
a += b
# => [
# =>     [0] 1,
# =>     [1] 3,
# =>     [2] 4,
# =>     [3] 1,
# =>     [4] 3,
# =>     [5] 8
# => ]


#===================================================================================#
# 两数组 求 交集
a = [1,3,5,7]
b = [3,1,8]
a &= b
# => [
# =>     [0] 1,
# =>     [1] 3
# => ]


#===================================================================================#
# reject delete_if 删除数组中某些元素
# 等价
Array(1..10).reject {|i| i % 3 == 0}
Array(1..10).delete_if {|i| i % 3 == 0}
# => [
#        [0] 1,
#        [1] 2,
#        [2] 4,
#        [3] 5,
#        [4] 7,
#        [5] 8,
#        [6] 10
#    ]


#===================================================================================#
# keep_if 留下数组中 满足条件的元素
a = [10,8,5,9]
a.keep_if {|i| i % 3 == 0}
# [9]


#===================================================================================#
# 测试一个
a = [1,2,3,4,5,6]
a.join('q')       # 1q2q3q4q5q6


#===================================================================================#
# 用*展开数组 赋值
arr = [2,5,8]
a,b,c = *arr  # * 展开数组
[a,b,c].each {|i| puts i}
# => 2
# => 5
# => 8


#===================================================================================#
# any? 数组元素 是否有满足条件的（只要有一个 返回true）
a = [1,2,3,8]
a.any? {|i| i > 3}
# => true
a.any? {|i| i < 0}
# => false


#===================================================================================#
# map 映射一个新数组
%w(ad sdaf sadf sadf).map {|i| i.capitalize}
# => [
# =>     [0] "Ad",
# =>     [1] "Sdaf",
# =>     [2] "Sadf",
# =>     [3] "Sadf"
# => ]


#===================================================================================#
# select 做筛选
h = [{:a => 'A', :b => 'd'},
     {:a => 'w', :b => 'r'},
     {:a => 'w', :b => 't'}]

a = h.select{|x| x[:a] == 'A'}
# =>   [
#          [0] {
#              :a => "A",
#              :b => "d"
#          }
#      ]


#===================================================================================#
# inject 与 reduce
# 相同的两个方法
# 功能：迭代效果（将上一次执行结果用于下一次）
# 1、在不传参数（初始值）时，第一个元素做初始值
# 2、这里n 初始值 m 执行后的结果
puts [1,2,3].inject {|n,m| m + n }    # => 6
puts [1,2,3].reduce {|n,m| m + n }    # => 6
puts [1,2,3].inject(2) {|n,m| m + n } # => 8


#===================================================================================#
# flatten 摊平数组
# 接参数时 表示摊平层级
arr = [1,2,3,[2,[5,6],3],8]
arr.flatten
# => [1,2,3,2,5,6,3,8]
arr.flatten(1)
# => [1,2,3,2,[5,6],3,8]


#===================================================================================#
# hash数组 排序
# 利用 元素 中 某个键的值 排序
data = [{:a => 1,:b => 'qw'},
        {:a => -2, :b => 'ji'},
        {:a => 3, :b => 'swe'},
        {:a => 2, :b => 'sdd'}]

data.sort_by {|i| i[:a]}
# => [{:a=>-2, :b=>"ji"},
# =>  {:a=>1, :b=>"qw"},
# =>  {:a=>2, :b=>"sdd"},
# =>  {:a=>3, :b=>"swe"}]
